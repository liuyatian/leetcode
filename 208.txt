#前缀树
class TrieNode {
public:
    char val;
    bool isWord;
    TrieNode *children[26];
    TrieNode(){
        val=0;
        isWord=false;
        memset(children,0x0,sizeof(TrieNode*)*26);
    }
    TrieNode (char c){
        val=c;
        isWord=false;
        memset(children,0x0,sizeof(TrieNode*)*26);
    }
};
class Trie {
public:
    /** Initialize your data structure here. */
    Trie() {
        root=new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode *p=root;
        if(word.size()<=0)
            return;
        for(int i=0;i<word.size();i++){
            char c=word[i];
            if(p->children[c-'a']==NULL){
                p->children[c-'a']=new TrieNode(c-'a');
            }
            p=p->children[c-'a'];
        }
        p->isWord=true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        TrieNode *p=root;
        if(word.size()<=0)
            return true;
        for(int i=0;i<word.size();i++){
            char c=word[i];
            if(p->children[c-'a']==NULL)
                return false;
            p=p->children[c-'a'];
        }
        return p->isWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        TrieNode *p=root;
        if(prefix.size()<=0)
            return true;
        for(int i=0;i<prefix.size();i++){
            char c=prefix[i];
            if(p->children[c-'a']==NULL)
                return false;
            p=p->children[c-'a'];
        }
        return true;
    }
    void freeTrieNode(TrieNode *p){
        if(p==NULL)
            return;
        for(int i=0;i<26;i++){
            if(p->children[i])
                freeTrieNode(p->children[i]);
        }
        free(p);
    }
    ~Trie(){
        freeTrieNode(root);
    }
private:
    TrieNode *root;
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * bool param_2 = obj.search(word);
 * bool param_3 = obj.startsWith(prefix);
 */