#暴力dfs 超时
class Solution {
public:
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        vector<string>res;
        set<string>st;
        vector<vector<bool> >v(board.size(),vector<bool>(board[0].size(),false));
        for(int i=0;i<words.size();i++)
            st.insert(words[i]);
        if(board.size()==0)
            return res;
        for(auto x:st){
            bool flag=false;
            for(int i=0;i<board.size();i++){
                for(int j=0;j<board[0].size();j++){
                    v[i][j]=true;
                    if(dfs(board,x,i,j,v)){
                        flag=true;
                    }
                    v[i][j]=false;
                    if(flag==true)
                        break;
                }
                if(flag==true)
                    break;
            }
            if(flag==true)
                res.push_back(x);
        }
        return res;
    }
    bool dfs(vector<vector<char> >&board,string word,int k,int t,vector<vector<bool> >v){
        if(word.size()==0)
            return true;
        if(word.size()==1)
            return board[k][t]==word[0];
        if(board[k][t]!=word[0])
            return false;
        if(k+1<board.size()&&v[k+1][t]==false){
            v[k+1][t]=true;
            if(dfs(board,word.substr(1),k+1,t,v))
                return true;
            v[k+1][t]=false;
        }
        if(k-1>=0&&v[k-1][t]==false){
            v[k-1][t]=true;
            if(dfs(board,word.substr(1),k-1,t,v))
                return true;
            v[k-1][t]=false;
        }
        if(t+1<board[0].size()&&v[k][t+1]==false){
            v[k][t+1]=true;
            if(dfs(board,word.substr(1),k,t+1,v))
                return true;
            v[k][t+1]=false;
        }
        if(t-1>=0&&v[k][t-1]==false){
            v[k][t-1]=true;
            if(dfs(board,word.substr(1),k,t-1,v))
                return true;
            v[k][t-1]=false;
        }
        return false;
    }
};

前缀树+dfs.  AC.  调了好久不容易啊
class Solution {
public:
    struct TrieNode{
        char val;
        bool isWord;
        TrieNode *children[26];
        TrieNode(){
            val=0;
            isWord=false;
            memset(children,0,sizeof(TrieNode*)*26);
        }
        TrieNode(char c){
            val=c;
            isWord=false;
            memset(children,0,sizeof(TrieNode*)*26);
        }
    };
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        set<string>st;
        vector<string>res;
        TrieNode *root=new TrieNode();
        for(int i=0;i<words.size();i++){
            TrieNode *p=root;
            for(int j=0;j<words[i].size();j++){
                char c=words[i][j];
                if(p->children[c-'a']==NULL){
                    p->children[c-'a']=new TrieNode(c);
                }
                p=p->children[c-'a'];
            }
            p->isWord=true;
        }
        vector<vector<bool> >v(board.size(),vector<bool>(board[0].size(),false));
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[0].size();j++){
                string ans;
                v[i][j]=true;
                dfs(i,j,board,root,st,ans,v);
                v[i][j]=false;
            }
        }
        for(auto x:st)
            res.push_back(x);
        return res;
    }
    void dfs(int k,int t,vector<vector<char> >&board,TrieNode*root,set<string>&st,string ans,vector<vector<bool> >v){
        char c=board[k][t];
        if(root->children[c-'a']){
            if(root->children[c-'a']->isWord)
                st.insert(ans+c);
            if(k+1<board.size()&&v[k+1][t]==false){
                v[k+1][t]=true;
                dfs(k+1,t,board,root->children[c-'a'],st,ans+c,v);
                v[k+1][t]=false;
            }
            if(k-1>=0&&v[k-1][t]==false){
                v[k-1][t]=true;
                dfs(k-1,t,board,root->children[c-'a'],st,ans+c,v);
                v[k-1][t]=false;
            }
            if(t+1<board[0].size()&&v[k][t+1]==false){
                v[k][t+1]=true;
                dfs(k,t+1,board,root->children[c-'a'],st,ans+c,v);
                v[k][t+1]=false;
            }
            if(t-1>=0&&v[k][t-1]==false){
                v[k][t-1]=true;
                dfs(k,t-1,board,root->children[c-'a'],st,ans+c,v);
                v[k][t-1]=false;
            }
        }
    }
};

